// Mocks generated by Mockito 5.4.2-wip from annotations
// in sideboard/test/modules/mtg_submodule/data/repository/scryfall_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:scryfall_api/scryfall_api.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaginableList_0<T> extends _i1.SmartFake
    implements _i2.PaginableList<T> {
  _FakePaginableList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMtgSet_1 extends _i1.SmartFake implements _i2.MtgSet {
  _FakeMtgSet_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMtgCard_2 extends _i1.SmartFake implements _i2.MtgCard {
  _FakeMtgCard_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCatalog_3 extends _i1.SmartFake implements _i2.Catalog {
  _FakeCatalog_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCardList_4 extends _i1.SmartFake implements _i2.CardList {
  _FakeCardList_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeManaCost_5 extends _i1.SmartFake implements _i2.ManaCost {
  _FakeManaCost_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBulkData_6 extends _i1.SmartFake implements _i2.BulkData {
  _FakeBulkData_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMigration_7 extends _i1.SmartFake implements _i2.Migration {
  _FakeMigration_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScryfallApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockScryfallApiClient extends _i1.Mock implements _i2.ScryfallApiClient {
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<_i2.PaginableList<_i2.MtgSet>> getAllSets() => (super.noSuchMethod(
        Invocation.method(
          #getAllSets,
          [],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.MtgSet>>.value(
            _FakePaginableList_0<_i2.MtgSet>(
          this,
          Invocation.method(
            #getAllSets,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.MtgSet>>.value(
                _FakePaginableList_0<_i2.MtgSet>(
          this,
          Invocation.method(
            #getAllSets,
            [],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.MtgSet>>);
  @override
  _i3.Future<_i2.MtgSet> getSetByCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #getSetByCode,
          [code],
        ),
        returnValue: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetByCode,
            [code],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetByCode,
            [code],
          ),
        )),
      ) as _i3.Future<_i2.MtgSet>);
  @override
  _i3.Future<_i2.MtgSet> getSetByTcgplayerId(int? tcgplayerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSetByTcgplayerId,
          [tcgplayerId],
        ),
        returnValue: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetByTcgplayerId,
            [tcgplayerId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetByTcgplayerId,
            [tcgplayerId],
          ),
        )),
      ) as _i3.Future<_i2.MtgSet>);
  @override
  _i3.Future<_i2.MtgSet> getSetById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSetById,
          [id],
        ),
        returnValue: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgSet>.value(_FakeMtgSet_1(
          this,
          Invocation.method(
            #getSetById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.MtgSet>);
  @override
  _i3.Future<_i2.PaginableList<_i2.MtgCard>> searchCards(
    String? searchQuery, {
    _i2.RollupMode? rollupMode,
    _i2.SortingOrder? sortingOrder,
    _i2.SortingDirection? sortingDirection,
    bool? includeExtras,
    bool? includeMultilingual,
    bool? includeVariations,
    int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCards,
          [searchQuery],
          {
            #rollupMode: rollupMode,
            #sortingOrder: sortingOrder,
            #sortingDirection: sortingDirection,
            #includeExtras: includeExtras,
            #includeMultilingual: includeMultilingual,
            #includeVariations: includeVariations,
            #page: page,
          },
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.MtgCard>>.value(
            _FakePaginableList_0<_i2.MtgCard>(
          this,
          Invocation.method(
            #searchCards,
            [searchQuery],
            {
              #rollupMode: rollupMode,
              #sortingOrder: sortingOrder,
              #sortingDirection: sortingDirection,
              #includeExtras: includeExtras,
              #includeMultilingual: includeMultilingual,
              #includeVariations: includeVariations,
              #page: page,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.MtgCard>>.value(
                _FakePaginableList_0<_i2.MtgCard>(
          this,
          Invocation.method(
            #searchCards,
            [searchQuery],
            {
              #rollupMode: rollupMode,
              #sortingOrder: sortingOrder,
              #sortingDirection: sortingDirection,
              #includeExtras: includeExtras,
              #includeMultilingual: includeMultilingual,
              #includeVariations: includeVariations,
              #page: page,
            },
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.MtgCard>>);
  @override
  _i3.Future<_i2.MtgCard> getCardByName(
    String? name, {
    _i2.SearchType? searchType = _i2.SearchType.exact,
    String? set,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByName,
          [name],
          {
            #searchType: searchType,
            #set: set,
          },
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByName,
            [name],
            {
              #searchType: searchType,
              #set: set,
            },
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByName,
            [name],
            {
              #searchType: searchType,
              #set: set,
            },
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByNameAsImage(
    String? name, {
    _i2.SearchType? searchType = _i2.SearchType.exact,
    String? set,
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByNameAsImage,
          [name],
          {
            #searchType: searchType,
            #set: set,
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.Catalog> autocompleteCardName(
    String? query, {
    bool? includeExtras,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #autocompleteCardName,
          [query],
          {#includeExtras: includeExtras},
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #autocompleteCardName,
            [query],
            {#includeExtras: includeExtras},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #autocompleteCardName,
            [query],
            {#includeExtras: includeExtras},
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.MtgCard> getRandomCard({String? query}) => (super.noSuchMethod(
        Invocation.method(
          #getRandomCard,
          [],
          {#query: query},
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getRandomCard,
            [],
            {#query: query},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getRandomCard,
            [],
            {#query: query},
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getRandomCardAsImage({
    String? query,
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomCardAsImage,
          [],
          {
            #query: query,
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.CardList> getCardsByIdentifiers(
          List<_i2.CardIdentifier>? identifiers) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsByIdentifiers,
          [identifiers],
        ),
        returnValue: _i3.Future<_i2.CardList>.value(_FakeCardList_4(
          this,
          Invocation.method(
            #getCardsByIdentifiers,
            [identifiers],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.CardList>.value(_FakeCardList_4(
          this,
          Invocation.method(
            #getCardsByIdentifiers,
            [identifiers],
          ),
        )),
      ) as _i3.Future<_i2.CardList>);
  @override
  _i3.Future<_i2.MtgCard> getCardBySetCodeAndCollectorNumber(
    String? setCode,
    String? collectorNumber, {
    _i2.Language? language,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardBySetCodeAndCollectorNumber,
          [
            setCode,
            collectorNumber,
          ],
          {#language: language},
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardBySetCodeAndCollectorNumber,
            [
              setCode,
              collectorNumber,
            ],
            {#language: language},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardBySetCodeAndCollectorNumber,
            [
              setCode,
              collectorNumber,
            ],
            {#language: language},
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardBySetCodeAndCollectorNumberAsImage(
    String? setCode,
    String? collectorNumber, {
    _i2.Language? language,
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardBySetCodeAndCollectorNumberAsImage,
          [
            setCode,
            collectorNumber,
          ],
          {
            #language: language,
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardByMultiverseId(int? multiverseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByMultiverseId,
          [multiverseId],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByMultiverseId,
            [multiverseId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByMultiverseId,
            [multiverseId],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByMultiverseIdAsImage(
    int? multiverseId, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByMultiverseIdAsImage,
          [multiverseId],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardByMtgoId(int? mtgoId) => (super.noSuchMethod(
        Invocation.method(
          #getCardByMtgoId,
          [mtgoId],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByMtgoId,
            [mtgoId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByMtgoId,
            [mtgoId],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByMtgoIdAsImage(
    int? mtgoId, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByMtgoIdAsImage,
          [mtgoId],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardByArenaId(int? arenaId) => (super.noSuchMethod(
        Invocation.method(
          #getCardByArenaId,
          [arenaId],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByArenaId,
            [arenaId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByArenaId,
            [arenaId],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByArenaIdAsImage(
    int? arenaId, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByArenaIdAsImage,
          [arenaId],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardByTcgplayerId(int? tcgplayerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByTcgplayerId,
          [tcgplayerId],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByTcgplayerId,
            [tcgplayerId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByTcgplayerId,
            [tcgplayerId],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByTcgplayerIdAsImage(
    int? tcgplayerId, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByTcgplayerIdAsImage,
          [tcgplayerId],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardByCardmarketId(int? cardmarketId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByCardmarketId,
          [cardmarketId],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByCardmarketId,
            [cardmarketId],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardByCardmarketId,
            [cardmarketId],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByCardmarketIdAsImage(
    int? cardmarketId, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByCardmarketIdAsImage,
          [cardmarketId],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.MtgCard> getCardById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCardById,
          [id],
        ),
        returnValue: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.MtgCard>.value(_FakeMtgCard_2(
          this,
          Invocation.method(
            #getCardById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.MtgCard>);
  @override
  _i3.Future<_i4.Uint8List> getCardByIdAsImage(
    String? id, {
    bool? backFace,
    _i2.ImageVersion? imageVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardByIdAsImage,
          [id],
          {
            #backFace: backFace,
            #imageVersion: imageVersion,
          },
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Ruling>> getRulingsByMultiverseId(
          int? multiverseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRulingsByMultiverseId,
          [multiverseId],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
            _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByMultiverseId,
            [multiverseId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByMultiverseId,
            [multiverseId],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Ruling>> getRulingsByMtgoId(int? mtgoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRulingsByMtgoId,
          [mtgoId],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
            _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByMtgoId,
            [mtgoId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByMtgoId,
            [mtgoId],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Ruling>> getRulingsByArenaId(int? arenaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRulingsByArenaId,
          [arenaId],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
            _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByArenaId,
            [arenaId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsByArenaId,
            [arenaId],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Ruling>>
      getRulingsBySetCodeAndCollectorNumber(
    String? setCode,
    String? collectorNumber,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getRulingsBySetCodeAndCollectorNumber,
              [
                setCode,
                collectorNumber,
              ],
            ),
            returnValue: _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                _FakePaginableList_0<_i2.Ruling>(
              this,
              Invocation.method(
                #getRulingsBySetCodeAndCollectorNumber,
                [
                  setCode,
                  collectorNumber,
                ],
              ),
            )),
            returnValueForMissingStub:
                _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                    _FakePaginableList_0<_i2.Ruling>(
              this,
              Invocation.method(
                #getRulingsBySetCodeAndCollectorNumber,
                [
                  setCode,
                  collectorNumber,
                ],
              ),
            )),
          ) as _i3.Future<_i2.PaginableList<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Ruling>> getRulingsById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRulingsById,
          [id],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
            _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.Ruling>>.value(
                _FakePaginableList_0<_i2.Ruling>(
          this,
          Invocation.method(
            #getRulingsById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.CardSymbol>> getAllCardSymbols() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCardSymbols,
          [],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.CardSymbol>>.value(
            _FakePaginableList_0<_i2.CardSymbol>(
          this,
          Invocation.method(
            #getAllCardSymbols,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.CardSymbol>>.value(
                _FakePaginableList_0<_i2.CardSymbol>(
          this,
          Invocation.method(
            #getAllCardSymbols,
            [],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.CardSymbol>>);
  @override
  _i3.Future<_i2.ManaCost> parseMana(String? manaCost) => (super.noSuchMethod(
        Invocation.method(
          #parseMana,
          [manaCost],
        ),
        returnValue: _i3.Future<_i2.ManaCost>.value(_FakeManaCost_5(
          this,
          Invocation.method(
            #parseMana,
            [manaCost],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.ManaCost>.value(_FakeManaCost_5(
          this,
          Invocation.method(
            #parseMana,
            [manaCost],
          ),
        )),
      ) as _i3.Future<_i2.ManaCost>);
  @override
  _i3.Future<_i2.Catalog> getCatalog(_i2.CatalogType? catalogType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCatalog,
          [catalogType],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCatalog,
            [catalogType],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCatalog,
            [catalogType],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getCardNames() => (super.noSuchMethod(
        Invocation.method(
          #getCardNames,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCardNames,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCardNames,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getArtistNames() => (super.noSuchMethod(
        Invocation.method(
          #getArtistNames,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getArtistNames,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getArtistNames,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getWordBank() => (super.noSuchMethod(
        Invocation.method(
          #getWordBank,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getWordBank,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getWordBank,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getCreatureTypes() => (super.noSuchMethod(
        Invocation.method(
          #getCreatureTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCreatureTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getCreatureTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getPlaneswalkerTypes() => (super.noSuchMethod(
        Invocation.method(
          #getPlaneswalkerTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getPlaneswalkerTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getPlaneswalkerTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getLandTypes() => (super.noSuchMethod(
        Invocation.method(
          #getLandTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getLandTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getLandTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getArtifactTypes() => (super.noSuchMethod(
        Invocation.method(
          #getArtifactTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getArtifactTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getArtifactTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getEnchantmentTypes() => (super.noSuchMethod(
        Invocation.method(
          #getEnchantmentTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getEnchantmentTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getEnchantmentTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getSpellTypes() => (super.noSuchMethod(
        Invocation.method(
          #getSpellTypes,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getSpellTypes,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getSpellTypes,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getPowers() => (super.noSuchMethod(
        Invocation.method(
          #getPowers,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getPowers,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getPowers,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getToughnesses() => (super.noSuchMethod(
        Invocation.method(
          #getToughnesses,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getToughnesses,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getToughnesses,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getLoyalties() => (super.noSuchMethod(
        Invocation.method(
          #getLoyalties,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getLoyalties,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getLoyalties,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getWatermarks() => (super.noSuchMethod(
        Invocation.method(
          #getWatermarks,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getWatermarks,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getWatermarks,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getKeywordAbilities() => (super.noSuchMethod(
        Invocation.method(
          #getKeywordAbilities,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getKeywordAbilities,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getKeywordAbilities,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getKeywordActions() => (super.noSuchMethod(
        Invocation.method(
          #getKeywordActions,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getKeywordActions,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getKeywordActions,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.Catalog> getAbilityWords() => (super.noSuchMethod(
        Invocation.method(
          #getAbilityWords,
          [],
        ),
        returnValue: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getAbilityWords,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Catalog>.value(_FakeCatalog_3(
          this,
          Invocation.method(
            #getAbilityWords,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Catalog>);
  @override
  _i3.Future<_i2.PaginableList<_i2.BulkData>> getBulkData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkData,
          [],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.BulkData>>.value(
            _FakePaginableList_0<_i2.BulkData>(
          this,
          Invocation.method(
            #getBulkData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.BulkData>>.value(
                _FakePaginableList_0<_i2.BulkData>(
          this,
          Invocation.method(
            #getBulkData,
            [],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.BulkData>>);
  @override
  _i3.Future<_i2.BulkData> getBulkDataById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getBulkDataById,
          [id],
        ),
        returnValue: _i3.Future<_i2.BulkData>.value(_FakeBulkData_6(
          this,
          Invocation.method(
            #getBulkDataById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.BulkData>.value(_FakeBulkData_6(
          this,
          Invocation.method(
            #getBulkDataById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.BulkData>);
  @override
  _i3.Future<_i4.Uint8List> getBulkDataByIdAsFile(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkDataByIdAsFile,
          [id],
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<_i2.BulkData> getBulkDataByType(_i2.BulkDataType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkDataByType,
          [type],
        ),
        returnValue: _i3.Future<_i2.BulkData>.value(_FakeBulkData_6(
          this,
          Invocation.method(
            #getBulkDataByType,
            [type],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.BulkData>.value(_FakeBulkData_6(
          this,
          Invocation.method(
            #getBulkDataByType,
            [type],
          ),
        )),
      ) as _i3.Future<_i2.BulkData>);
  @override
  _i3.Future<_i4.Uint8List> getBulkDataByTypeAsFile(_i2.BulkDataType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkDataByTypeAsFile,
          [type],
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<List<_i2.MtgCard>> getBulkDataOracleCards() => (super.noSuchMethod(
        Invocation.method(
          #getBulkDataOracleCards,
          [],
        ),
        returnValue: _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
      ) as _i3.Future<List<_i2.MtgCard>>);
  @override
  _i3.Future<List<_i2.MtgCard>> getBulkDataUniqueArtwork() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkDataUniqueArtwork,
          [],
        ),
        returnValue: _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
      ) as _i3.Future<List<_i2.MtgCard>>);
  @override
  _i3.Future<List<_i2.MtgCard>> getBulkDataDefaultCards() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBulkDataDefaultCards,
          [],
        ),
        returnValue: _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
      ) as _i3.Future<List<_i2.MtgCard>>);
  @override
  _i3.Future<List<_i2.MtgCard>> getBulkDataAllCards() => (super.noSuchMethod(
        Invocation.method(
          #getBulkDataAllCards,
          [],
        ),
        returnValue: _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.MtgCard>>.value(<_i2.MtgCard>[]),
      ) as _i3.Future<List<_i2.MtgCard>>);
  @override
  _i3.Future<List<_i2.Ruling>> getBulkDataRulings() => (super.noSuchMethod(
        Invocation.method(
          #getBulkDataRulings,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Ruling>>.value(<_i2.Ruling>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.Ruling>>.value(<_i2.Ruling>[]),
      ) as _i3.Future<List<_i2.Ruling>>);
  @override
  _i3.Future<_i2.PaginableList<_i2.Migration>> getMigrations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMigrations,
          [],
        ),
        returnValue: _i3.Future<_i2.PaginableList<_i2.Migration>>.value(
            _FakePaginableList_0<_i2.Migration>(
          this,
          Invocation.method(
            #getMigrations,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PaginableList<_i2.Migration>>.value(
                _FakePaginableList_0<_i2.Migration>(
          this,
          Invocation.method(
            #getMigrations,
            [],
          ),
        )),
      ) as _i3.Future<_i2.PaginableList<_i2.Migration>>);
  @override
  _i3.Future<_i2.Migration> getMigration(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMigration,
          [id],
        ),
        returnValue: _i3.Future<_i2.Migration>.value(_FakeMigration_7(
          this,
          Invocation.method(
            #getMigration,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Migration>.value(_FakeMigration_7(
          this,
          Invocation.method(
            #getMigration,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.Migration>);
}
